{"ast":null,"code":"var _jsxFileName = \"/Users/trifa/Desktop/udacity_react/UdacityBookStoreProject/starter/src/screens/SearchScreen.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from \"react\";\nimport SearchBar from \"../components/SearchBar\";\nimport SearchResult from \"../components/SearchResult\";\nimport * as BooksAPI from \"../apis/BooksAPI\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst SearchScreen = () => {\n  _s();\n\n  //------------------------------------- Use State Declare -----------------------------------------\n  const [query, setQuery] = useState(\"\");\n  const [searchResult, setSearchResult] = useState([]); //------------------------------------- Update Function Via API -----------------------------------\n\n  const updateBookShelf = async (bookId, newShelf) => {\n    // const bookToBeUpdated = books.filter((book) => (book.id === bookId))\n    const res = await BooksAPI.update({\n      id: bookId\n    }, newShelf);\n  };\n\n  const searchBookFromServer = async (query, maxResults) => {\n    console.log(query);\n    const result = await BooksAPI.search(query, maxResults);\n\n    if ('error' in result) {\n      setSearchResult([]);\n    } else {\n      setSearchResult(result);\n    }\n  }; //------------------------------------- State Update Functions ------------------------------------\n\n\n  const updateQuery = newQuery => {\n    setQuery(newQuery.trim());\n    newQuery.length !== 0 ? searchBookFromServer(newQuery, 20) : setSearchResult([]);\n  }; //------------------------------------- Return ----------------------------------------------------\n\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"app\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"search-books\",\n      children: [/*#__PURE__*/_jsxDEV(SearchBar, {\n        query: query,\n        onSearchBarValueChange: value => updateQuery(value)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 54,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(SearchResult, {\n        books: searchResult,\n        updateBookShelf: (bookId, newShelf) => {\n          updateBookShelf(bookId, newShelf);\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 58,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 52,\n    columnNumber: 5\n  }, this);\n};\n\n_s(SearchScreen, \"ysf6N6P1khctZ+VeVBPaxcoGOx0=\");\n\n_c = SearchScreen;\nexport default SearchScreen;\n\nvar _c;\n\n$RefreshReg$(_c, \"SearchScreen\");","map":{"version":3,"sources":["/Users/trifa/Desktop/udacity_react/UdacityBookStoreProject/starter/src/screens/SearchScreen.js"],"names":["React","useState","SearchBar","SearchResult","BooksAPI","SearchScreen","query","setQuery","searchResult","setSearchResult","updateBookShelf","bookId","newShelf","res","update","id","searchBookFromServer","maxResults","console","log","result","search","updateQuery","newQuery","trim","length","value"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AAEA,OAAOC,SAAP,MAAsB,yBAAtB;AACA,OAAOC,YAAP,MAAyB,4BAAzB;AAEA,OAAO,KAAKC,QAAZ,MAA0B,kBAA1B;;;AAEA,MAAMC,YAAY,GAAG,MAAM;AAAA;;AAG3B;AAGE,QAAM,CAACC,KAAD,EAAQC,QAAR,IAAoBN,QAAQ,CAAC,EAAD,CAAlC;AACA,QAAM,CAACO,YAAD,EAAeC,eAAf,IAAkCR,QAAQ,CAAC,EAAD,CAAhD,CAPyB,CAU3B;;AAGE,QAAMS,eAAe,GAAG,OAAOC,MAAP,EAAeC,QAAf,KAA4B;AAClD;AACA,UAAMC,GAAG,GAAG,MAAMT,QAAQ,CAACU,MAAT,CAAgB;AAACC,MAAAA,EAAE,EAAEJ;AAAL,KAAhB,EAA8BC,QAA9B,CAAlB;AACD,GAHD;;AAKA,QAAMI,oBAAoB,GAAG,OAAOV,KAAP,EAAcW,UAAd,KAA6B;AACxDC,IAAAA,OAAO,CAACC,GAAR,CAAYb,KAAZ;AACA,UAAMc,MAAM,GAAG,MAAMhB,QAAQ,CAACiB,MAAT,CAAgBf,KAAhB,EAAuBW,UAAvB,CAArB;;AACA,QAAI,WAAWG,MAAf,EAAsB;AACpBX,MAAAA,eAAe,CAAC,EAAD,CAAf;AACD,KAFD,MAEO;AACLA,MAAAA,eAAe,CAACW,MAAD,CAAf;AACD;AACF,GARD,CAlByB,CA6B3B;;;AAGE,QAAME,WAAW,GAAIC,QAAD,IAAc;AAChChB,IAAAA,QAAQ,CAACgB,QAAQ,CAACC,IAAT,EAAD,CAAR;AACAD,IAAAA,QAAQ,CAACE,MAAT,KAAoB,CAApB,GACIT,oBAAoB,CAACO,QAAD,EAAW,EAAX,CADxB,GAEId,eAAe,CAAC,EAAD,CAFnB;AAGD,GALD,CAhCyB,CAwC3B;;;AAGE,sBACE;AAAK,IAAA,SAAS,EAAC,KAAf;AAAA,2BACE;AAAK,MAAA,SAAS,EAAC,cAAf;AAAA,8BACE,QAAC,SAAD;AACE,QAAA,KAAK,EAAEH,KADT;AAEE,QAAA,sBAAsB,EAAGoB,KAAD,IAAWJ,WAAW,CAACI,KAAD;AAFhD;AAAA;AAAA;AAAA;AAAA,cADF,eAKE,QAAC,YAAD;AACE,QAAA,KAAK,EAAElB,YADT;AAEE,QAAA,eAAe,EAAE,CAACG,MAAD,EAASC,QAAT,KAAsB;AAACF,UAAAA,eAAe,CAACC,MAAD,EAASC,QAAT,CAAf;AAAkC;AAF5E;AAAA;AAAA;AAAA;AAAA,cALF;AAAA;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,UADF;AAgBD,CA3DD;;GAAMP,Y;;KAAAA,Y;AA6DN,eAAeA,YAAf","sourcesContent":["import React, { useState } from \"react\";\n\nimport SearchBar from \"../components/SearchBar\";\nimport SearchResult from \"../components/SearchResult\";\n\nimport * as BooksAPI from \"../apis/BooksAPI\";\n\nconst SearchScreen = () => {\n\n\n//------------------------------------- Use State Declare -----------------------------------------\n\n\n  const [query, setQuery] = useState(\"\");\n  const [searchResult, setSearchResult] = useState([]);\n\n\n//------------------------------------- Update Function Via API -----------------------------------\n\n\n  const updateBookShelf = async (bookId, newShelf) => {\n    // const bookToBeUpdated = books.filter((book) => (book.id === bookId))\n    const res = await BooksAPI.update({id: bookId}, newShelf);\n  };\n\n  const searchBookFromServer = async (query, maxResults) => {\n    console.log(query)\n    const result = await BooksAPI.search(query, maxResults);\n    if ('error' in result){\n      setSearchResult([]);\n    } else {\n      setSearchResult(result);\n    }\n  }\n\n\n//------------------------------------- State Update Functions ------------------------------------\n\n\n  const updateQuery = (newQuery) => {\n    setQuery(newQuery.trim());\n    newQuery.length !== 0 \n      ? searchBookFromServer(newQuery, 20)\n      : setSearchResult([])\n  }\n\n\n//------------------------------------- Return ----------------------------------------------------\n\n\n  return(\n    <div className=\"app\">\n      <div className=\"search-books\">\n        <SearchBar \n          query={query} \n          onSearchBarValueChange={(value) => updateQuery(value)}\n        />\n        <SearchResult\n          books={searchResult}\n          updateBookShelf={(bookId, newShelf) => {updateBookShelf(bookId, newShelf)}}\n        />\n      </div>\n    </div>\n  );\n\n\n};\n\nexport default SearchScreen;"]},"metadata":{},"sourceType":"module"}