{"ast":null,"code":"var _jsxFileName = \"/Users/trifa/Desktop/udacity_react/UdacityBookStoreProject/starter/src/screens/MainScreen.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from \"react\";\nimport { Link } from \"react-router-dom\";\nimport BookShelve from \"../components/BookShelve\";\nimport * as BooksAPI from \"../apis/BooksAPI\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst CURRENTLY_READING_SHELF_KEY = \"currentlyReading\";\nconst CURRENTLU_READING_TITLE = \"Currently Reading\";\nconst WANT_TO_READ_SHELF_KEY = \"wantToRead\";\nconst WANT_TO_READ_TITLE = \"Want To Read\";\nconst READ_KEY = \"read\";\nconst READ_TITLE = \"Read\";\nconst SHELF_ARRAY = [{\n  title: CURRENTLU_READING_TITLE,\n  key: CURRENTLY_READING_SHELF_KEY\n}, {\n  title: WANT_TO_READ_TITLE,\n  key: WANT_TO_READ_SHELF_KEY\n}, {\n  title: READ_TITLE,\n  key: READ_KEY\n}];\n\nconst MainScreen = () => {\n  _s();\n\n  const [books, setBooks] = useState([]);\n  const [update, setUpdate] = useState([]);\n\n  const getBooksFromSpecificShelf = shelfName => {\n    return books.filter(book => book.shelf === shelfName);\n  };\n\n  useEffect(() => {\n    const getBooksFromServer = async () => {\n      // Get All Book From Server.\n      const res = await BooksAPI.getAll();\n      console.log(res);\n      setBooks(res);\n    };\n\n    getBooksFromServer();\n  }, [update]);\n\n  const updateBookShelf = async (bookId, newShelf) => {\n    const bookToBeUpdated = books.filter(book => book.id === bookId);\n    const res = await BooksAPI.update({\n      id: bookId\n    }, newShelf);\n    setUpdate(res);\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"app\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"list-books\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"list-books-title\",\n        children: /*#__PURE__*/_jsxDEV(\"h1\", {\n          children: \"MyReads\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 51,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 50,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"list-books-content\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          children: SHELF_ARRAY.map(shelf => /*#__PURE__*/_jsxDEV(BookShelve, {\n            bookShelfName: shelf.title,\n            books: getBooksFromSpecificShelf(shelf.key),\n            updateBookShelf: (bookId, newShelf) => {\n              updateBookShelf(bookId, newShelf);\n            }\n          }, shelf.title, false, {\n            fileName: _jsxFileName,\n            lineNumber: 56,\n            columnNumber: 15\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 54,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 53,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"open-search\",\n        children: /*#__PURE__*/_jsxDEV(Link, {\n          to: \"/search\",\n          children: \"Add a book\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 66,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 65,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 48,\n    columnNumber: 5\n  }, this);\n};\n\n_s(MainScreen, \"simOwbdiqypu5HPXj4lGKlbBgyo=\");\n\n_c = MainScreen;\nexport default MainScreen;\n\nvar _c;\n\n$RefreshReg$(_c, \"MainScreen\");","map":{"version":3,"sources":["/Users/trifa/Desktop/udacity_react/UdacityBookStoreProject/starter/src/screens/MainScreen.js"],"names":["React","useState","useEffect","Link","BookShelve","BooksAPI","CURRENTLY_READING_SHELF_KEY","CURRENTLU_READING_TITLE","WANT_TO_READ_SHELF_KEY","WANT_TO_READ_TITLE","READ_KEY","READ_TITLE","SHELF_ARRAY","title","key","MainScreen","books","setBooks","update","setUpdate","getBooksFromSpecificShelf","shelfName","filter","book","shelf","getBooksFromServer","res","getAll","console","log","updateBookShelf","bookId","newShelf","bookToBeUpdated","id","map"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport { Link } from \"react-router-dom\";\n\nimport BookShelve from \"../components/BookShelve\";\n\nimport * as BooksAPI from \"../apis/BooksAPI\";\n\nconst CURRENTLY_READING_SHELF_KEY = \"currentlyReading\";\nconst CURRENTLU_READING_TITLE = \"Currently Reading\";\nconst WANT_TO_READ_SHELF_KEY = \"wantToRead\";\nconst WANT_TO_READ_TITLE = \"Want To Read\";\nconst READ_KEY = \"read\";\nconst READ_TITLE = \"Read\";\n\nconst SHELF_ARRAY = [\n  {title: CURRENTLU_READING_TITLE, key: CURRENTLY_READING_SHELF_KEY},\n  {title: WANT_TO_READ_TITLE, key: WANT_TO_READ_SHELF_KEY},\n  {title: READ_TITLE, key: READ_KEY}\n]\n\nconst MainScreen = () => {\n  const [books, setBooks] = useState([]);\n  const [update, setUpdate] = useState([]);\n\n  const getBooksFromSpecificShelf = (shelfName) => {\n    return (\n      books.filter((book) => book.shelf === shelfName)\n    );\n  }\n\n  useEffect(() => {\n    const getBooksFromServer = async () => {\n      // Get All Book From Server.\n      const res = await BooksAPI.getAll();\n      console.log(res);\n      setBooks(res);\n    };\n    getBooksFromServer();\n  }, [update]);\n\n  const updateBookShelf = async (bookId, newShelf) => {\n    const bookToBeUpdated = books.filter((book) => (book.id === bookId))\n    const res = await BooksAPI.update({id: bookId}, newShelf);\n    setUpdate(res)\n  };\n\n  return (\n    <div className=\"app\">\n      <div className=\"list-books\">\n        <div className=\"list-books-title\">\n          <h1>MyReads</h1>\n        </div>\n        <div className=\"list-books-content\">\n          <div>\n            {SHELF_ARRAY.map((shelf) => (\n              <BookShelve\n                key={shelf.title}\n                bookShelfName={shelf.title}\n                books={getBooksFromSpecificShelf(shelf.key)}\n                updateBookShelf={(bookId, newShelf) => {updateBookShelf(bookId, newShelf)}}\n              />\n            ))}\n          </div>\n        </div>\n        <div className=\"open-search\">\n          <Link to=\"/search\">Add a book</Link>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default MainScreen;\n"]},"metadata":{},"sourceType":"module"}