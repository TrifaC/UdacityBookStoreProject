{"ast":null,"code":"var _jsxFileName = \"/home/hkuit155/Desktop/Trifa_RN_Project/udacity_state_management/nd0191-c1-myreads/starter/src/screens/SearchScreen.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from \"react\";\nimport PropTypes from \"prop-types\";\nimport SearchBar from \"../components/SearchBar\";\nimport SearchResult from \"../components/SearchResult\";\nimport * as BooksAPI from \"../apis/BooksAPI\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst SearchScreen = () => {\n  _s();\n\n  const [query, setQuery] = useState(\"\");\n  const [searchResult, setSearchResult] = useState([]);\n\n  const searchBookFromServer = async (query, maxResults) => {\n    const result = await BooksAPI.search(query, maxResults);\n    console.log(result);\n    setSearchResult(result);\n  };\n\n  const updateBookShelf = async (bookId, newShelf) => {\n    // const bookToBeUpdated = books.filter((book) => (book.id === bookId))\n    const res = await BooksAPI.update({\n      id: bookId\n    }, newShelf);\n  };\n\n  const updateQuery = newQuery => {\n    setQuery(newQuery.trim());\n\n    if (newQuery.length !== 0) {\n      searchBookFromServer(newQuery, 20);\n    }\n  };\n\n  const clearQuery = () => {\n    updateQuery(\"\");\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"app\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"search-books\",\n      children: [/*#__PURE__*/_jsxDEV(SearchBar, {\n        query: query,\n        onSearchBarValueChange: value => updateQuery(value)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 38,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(SearchResult, {\n        books: searchResult,\n        updateBookShelf: (bookId, newShelf) => {\n          updateBookShelf(bookId, newShelf);\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 42,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 36,\n    columnNumber: 5\n  }, this);\n};\n\n_s(SearchScreen, \"ysf6N6P1khctZ+VeVBPaxcoGOx0=\");\n\n_c = SearchScreen;\nexport default SearchScreen;\n\nvar _c;\n\n$RefreshReg$(_c, \"SearchScreen\");","map":{"version":3,"sources":["/home/hkuit155/Desktop/Trifa_RN_Project/udacity_state_management/nd0191-c1-myreads/starter/src/screens/SearchScreen.js"],"names":["React","useState","PropTypes","SearchBar","SearchResult","BooksAPI","SearchScreen","query","setQuery","searchResult","setSearchResult","searchBookFromServer","maxResults","result","search","console","log","updateBookShelf","bookId","newShelf","res","update","id","updateQuery","newQuery","trim","length","clearQuery","value"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AACA,OAAOC,SAAP,MAAsB,YAAtB;AAEA,OAAOC,SAAP,MAAsB,yBAAtB;AACA,OAAOC,YAAP,MAAyB,4BAAzB;AAEA,OAAO,KAAKC,QAAZ,MAA0B,kBAA1B;;;AAEA,MAAMC,YAAY,GAAG,MAAM;AAAA;;AACzB,QAAM,CAACC,KAAD,EAAQC,QAAR,IAAoBP,QAAQ,CAAC,EAAD,CAAlC;AACA,QAAM,CAACQ,YAAD,EAAeC,eAAf,IAAkCT,QAAQ,CAAC,EAAD,CAAhD;;AAEA,QAAMU,oBAAoB,GAAG,OAAOJ,KAAP,EAAcK,UAAd,KAA6B;AACxD,UAAMC,MAAM,GAAG,MAAMR,QAAQ,CAACS,MAAT,CAAgBP,KAAhB,EAAuBK,UAAvB,CAArB;AACAG,IAAAA,OAAO,CAACC,GAAR,CAAYH,MAAZ;AACAH,IAAAA,eAAe,CAACG,MAAD,CAAf;AACD,GAJD;;AAMA,QAAMI,eAAe,GAAG,OAAOC,MAAP,EAAeC,QAAf,KAA4B;AAClD;AACA,UAAMC,GAAG,GAAG,MAAMf,QAAQ,CAACgB,MAAT,CAAgB;AAACC,MAAAA,EAAE,EAAEJ;AAAL,KAAhB,EAA8BC,QAA9B,CAAlB;AACD,GAHD;;AAKA,QAAMI,WAAW,GAAIC,QAAD,IAAc;AAChChB,IAAAA,QAAQ,CAACgB,QAAQ,CAACC,IAAT,EAAD,CAAR;;AACA,QAAID,QAAQ,CAACE,MAAT,KAAoB,CAAxB,EAA2B;AACzBf,MAAAA,oBAAoB,CAACa,QAAD,EAAW,EAAX,CAApB;AACD;AACF,GALD;;AAOA,QAAMG,UAAU,GAAG,MAAM;AACvBJ,IAAAA,WAAW,CAAC,EAAD,CAAX;AACD,GAFD;;AAIA,sBACE;AAAK,IAAA,SAAS,EAAC,KAAf;AAAA,2BACE;AAAK,MAAA,SAAS,EAAC,cAAf;AAAA,8BACE,QAAC,SAAD;AACE,QAAA,KAAK,EAAEhB,KADT;AAEE,QAAA,sBAAsB,EAAGqB,KAAD,IAAWL,WAAW,CAACK,KAAD;AAFhD;AAAA;AAAA;AAAA;AAAA,cADF,eAKE,QAAC,YAAD;AACE,QAAA,KAAK,EAAEnB,YADT;AAEE,QAAA,eAAe,EAAE,CAACS,MAAD,EAASC,QAAT,KAAsB;AAACF,UAAAA,eAAe,CAACC,MAAD,EAASC,QAAT,CAAf;AAAkC;AAF5E;AAAA;AAAA;AAAA;AAAA,cALF;AAAA;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,UADF;AAcD,CAxCD;;GAAMb,Y;;KAAAA,Y;AA0CN,eAAeA,YAAf","sourcesContent":["import React, { useState } from \"react\";\nimport PropTypes from \"prop-types\";\n\nimport SearchBar from \"../components/SearchBar\";\nimport SearchResult from \"../components/SearchResult\";\n\nimport * as BooksAPI from \"../apis/BooksAPI\";\n\nconst SearchScreen = () => {\n  const [query, setQuery] = useState(\"\");\n  const [searchResult, setSearchResult] = useState([]);\n\n  const searchBookFromServer = async (query, maxResults) => {\n    const result = await BooksAPI.search(query, maxResults);\n    console.log(result);\n    setSearchResult(result);\n  }\n\n  const updateBookShelf = async (bookId, newShelf) => {\n    // const bookToBeUpdated = books.filter((book) => (book.id === bookId))\n    const res = await BooksAPI.update({id: bookId}, newShelf);\n  };\n\n  const updateQuery = (newQuery) => {\n    setQuery(newQuery.trim());\n    if (newQuery.length !== 0) {\n      searchBookFromServer(newQuery, 20)\n    }\n  }\n\n  const clearQuery = () => {\n    updateQuery(\"\");\n  }\n\n  return(\n    <div className=\"app\">\n      <div className=\"search-books\">\n        <SearchBar \n          query={query} \n          onSearchBarValueChange={(value) => updateQuery(value)}\n        />\n        <SearchResult\n          books={searchResult}\n          updateBookShelf={(bookId, newShelf) => {updateBookShelf(bookId, newShelf)}}\n        />\n      </div>\n    </div>\n  );\n};\n\nexport default SearchScreen;"]},"metadata":{},"sourceType":"module"}