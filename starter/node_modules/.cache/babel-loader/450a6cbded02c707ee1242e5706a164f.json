{"ast":null,"code":"var _jsxFileName = \"/Users/trifa/Desktop/udacity_react/UdacityBookStoreProject/starter/src/screens/SearchScreen.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from \"react\";\nimport SearchBar from \"../components/SearchBar\";\nimport SearchResult from \"../components/SearchResult\";\nimport * as BooksAPI from \"../apis/BooksAPI\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst SearchScreen = () => {\n  _s();\n\n  //------------------------------------- Use State Declare -----------------------------------------\n  const [localBooks, setLocalBooks] = useState([]);\n  const [query, setQuery] = useState(\"\");\n  const [searchResult, setSearchResult] = useState([]); //------------------------------------- Update Function Via API -----------------------------------\n\n  const updateBookShelf = async (bookId, newShelf) => {\n    // const bookToBeUpdated = books.filter((book) => (book.id === bookId))\n    const res = await BooksAPI.update({\n      id: bookId\n    }, newShelf);\n  }; //------------------------------------- State Update Functions ------------------------------------\n\n\n  const updateQuery = searchQuery => {\n    console.log(searchQuery);\n    setQuery(searchQuery.trim());\n  }; //------------------------------------- UseEffect -------------------------------------------------\n  // Update the search result when the search query is changed.\n\n\n  useEffect(() => {\n    const searchBookFromServer = async (currentQuery, maxResults) => {\n      const result = await BooksAPI.search(currentQuery, maxResults);\n\n      if ('error' in result) {\n        setSearchResult([]);\n      } else {\n        setSearchResult(result);\n      }\n    };\n\n    query.length > 1 ? searchBookFromServer(query, 20) : setSearchResult([]);\n  }, [query]); // Get the local books from server.\n\n  useEffect(() => {\n    const getBooksFromServer = async () => {\n      // Get All Book From Server.\n      const res = await BooksAPI.getAll();\n      setLocalBooks(res);\n    };\n\n    getBooksFromServer();\n  }, []); //------------------------------------- Return ----------------------------------------------------\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"app\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"search-books\",\n      children: [/*#__PURE__*/_jsxDEV(SearchBar, {\n        query: query,\n        onSearchBarValueChange: value => updateQuery(value)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 72,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(SearchResult, {\n        books: searchResult,\n        updateBookShelf: (bookId, newShelf) => {\n          updateBookShelf(bookId, newShelf);\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 76,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 70,\n    columnNumber: 5\n  }, this);\n};\n\n_s(SearchScreen, \"Y91MBSkoPRGKK7iaWyQlgu8T2iI=\");\n\n_c = SearchScreen;\nexport default SearchScreen;\n\nvar _c;\n\n$RefreshReg$(_c, \"SearchScreen\");","map":{"version":3,"sources":["/Users/trifa/Desktop/udacity_react/UdacityBookStoreProject/starter/src/screens/SearchScreen.js"],"names":["React","useState","useEffect","SearchBar","SearchResult","BooksAPI","SearchScreen","localBooks","setLocalBooks","query","setQuery","searchResult","setSearchResult","updateBookShelf","bookId","newShelf","res","update","id","updateQuery","searchQuery","console","log","trim","searchBookFromServer","currentQuery","maxResults","result","search","length","getBooksFromServer","getAll","value"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;AAEA,OAAOC,SAAP,MAAsB,yBAAtB;AACA,OAAOC,YAAP,MAAyB,4BAAzB;AAEA,OAAO,KAAKC,QAAZ,MAA0B,kBAA1B;;;AAEA,MAAMC,YAAY,GAAG,MAAM;AAAA;;AAG3B;AAEE,QAAM,CAACC,UAAD,EAAaC,aAAb,IAA8BP,QAAQ,CAAC,EAAD,CAA5C;AACA,QAAM,CAACQ,KAAD,EAAQC,QAAR,IAAoBT,QAAQ,CAAC,EAAD,CAAlC;AACA,QAAM,CAACU,YAAD,EAAeC,eAAf,IAAkCX,QAAQ,CAAC,EAAD,CAAhD,CAPyB,CAU3B;;AAGE,QAAMY,eAAe,GAAG,OAAOC,MAAP,EAAeC,QAAf,KAA4B;AAClD;AACA,UAAMC,GAAG,GAAG,MAAMX,QAAQ,CAACY,MAAT,CAAgB;AAACC,MAAAA,EAAE,EAAEJ;AAAL,KAAhB,EAA8BC,QAA9B,CAAlB;AACD,GAHD,CAbyB,CAmB3B;;;AAGE,QAAMI,WAAW,GAAIC,WAAD,IAAiB;AACnCC,IAAAA,OAAO,CAACC,GAAR,CAAYF,WAAZ;AACAV,IAAAA,QAAQ,CAACU,WAAW,CAACG,IAAZ,EAAD,CAAR;AACD,GAHD,CAtByB,CA4B3B;AAGE;;;AACArB,EAAAA,SAAS,CAAC,MAAM;AACd,UAAMsB,oBAAoB,GAAG,OAAOC,YAAP,EAAqBC,UAArB,KAAoC;AAC/D,YAAMC,MAAM,GAAG,MAAMtB,QAAQ,CAACuB,MAAT,CAAgBH,YAAhB,EAA8BC,UAA9B,CAArB;;AACA,UAAI,WAAWC,MAAf,EAAsB;AACpBf,QAAAA,eAAe,CAAC,EAAD,CAAf;AACD,OAFD,MAEO;AACLA,QAAAA,eAAe,CAACe,MAAD,CAAf;AACD;AACF,KAPD;;AASAlB,IAAAA,KAAK,CAACoB,MAAN,GAAe,CAAf,GACEL,oBAAoB,CAACf,KAAD,EAAQ,EAAR,CADtB,GAEEG,eAAe,CAAC,EAAD,CAFjB;AAGD,GAbQ,EAaN,CAACH,KAAD,CAbM,CAAT,CAhCyB,CA+CzB;;AACAP,EAAAA,SAAS,CAAC,MAAI;AACZ,UAAM4B,kBAAkB,GAAG,YAAY;AACrC;AACA,YAAMd,GAAG,GAAG,MAAMX,QAAQ,CAAC0B,MAAT,EAAlB;AACAvB,MAAAA,aAAa,CAACQ,GAAD,CAAb;AACD,KAJD;;AAKAc,IAAAA,kBAAkB;AACnB,GAPQ,EAON,EAPM,CAAT,CAhDyB,CA0D3B;;AAGE,sBACE;AAAK,IAAA,SAAS,EAAC,KAAf;AAAA,2BACE;AAAK,MAAA,SAAS,EAAC,cAAf;AAAA,8BACE,QAAC,SAAD;AACE,QAAA,KAAK,EAAErB,KADT;AAEE,QAAA,sBAAsB,EAAGuB,KAAD,IAAWb,WAAW,CAACa,KAAD;AAFhD;AAAA;AAAA;AAAA;AAAA,cADF,eAKE,QAAC,YAAD;AACE,QAAA,KAAK,EAAErB,YADT;AAEE,QAAA,eAAe,EAAE,CAACG,MAAD,EAASC,QAAT,KAAsB;AAACF,UAAAA,eAAe,CAACC,MAAD,EAASC,QAAT,CAAf;AAAkC;AAF5E;AAAA;AAAA;AAAA;AAAA,cALF;AAAA;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,UADF;AAgBD,CA7ED;;GAAMT,Y;;KAAAA,Y;AA+EN,eAAeA,YAAf","sourcesContent":["import React, { useState, useEffect } from \"react\";\n\nimport SearchBar from \"../components/SearchBar\";\nimport SearchResult from \"../components/SearchResult\";\n\nimport * as BooksAPI from \"../apis/BooksAPI\";\n\nconst SearchScreen = () => {\n\n\n//------------------------------------- Use State Declare -----------------------------------------\n\n  const [localBooks, setLocalBooks] = useState([]);\n  const [query, setQuery] = useState(\"\");\n  const [searchResult, setSearchResult] = useState([]);\n\n\n//------------------------------------- Update Function Via API -----------------------------------\n\n\n  const updateBookShelf = async (bookId, newShelf) => {\n    // const bookToBeUpdated = books.filter((book) => (book.id === bookId))\n    const res = await BooksAPI.update({id: bookId}, newShelf);\n  };\n\n\n//------------------------------------- State Update Functions ------------------------------------\n\n\n  const updateQuery = (searchQuery) => {\n    console.log(searchQuery)\n    setQuery(searchQuery.trim());\n  }\n\n\n//------------------------------------- UseEffect -------------------------------------------------\n\n\n  // Update the search result when the search query is changed.\n  useEffect(() => {\n    const searchBookFromServer = async (currentQuery, maxResults) => {\n      const result = await BooksAPI.search(currentQuery, maxResults);\n      if ('error' in result){\n        setSearchResult([]);\n      } else {\n        setSearchResult(result);\n      }\n    }\n\n    query.length > 1 \n    ? searchBookFromServer(query, 20)\n    : setSearchResult([])\n  }, [query]);\n\n  // Get the local books from server.\n  useEffect(()=>{\n    const getBooksFromServer = async () => {\n      // Get All Book From Server.\n      const res = await BooksAPI.getAll();\n      setLocalBooks(res);\n    };\n    getBooksFromServer();\n  }, []);\n\n\n//------------------------------------- Return ----------------------------------------------------\n\n\n  return(\n    <div className=\"app\">\n      <div className=\"search-books\">\n        <SearchBar \n          query={query} \n          onSearchBarValueChange={(value) => updateQuery(value)}\n        />\n        <SearchResult\n          books={searchResult}\n          updateBookShelf={(bookId, newShelf) => {updateBookShelf(bookId, newShelf)}}\n        />\n      </div>\n    </div>\n  );\n\n\n};\n\nexport default SearchScreen;"]},"metadata":{},"sourceType":"module"}